/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package demo.customermanagement.core.dto.kafka.producedetails;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ContactMedium extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1312577864958100303L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ContactMedium\",\"namespace\":\"com.Kafka.avro\",\"fields\":[{\"name\":\"mediumType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"characteristic\",\"type\":{\"type\":\"record\",\"name\":\"Characteristic\",\"fields\":[{\"name\":\"emailAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"phoneNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ContactMedium> ENCODER =
      new BinaryMessageEncoder<ContactMedium>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ContactMedium> DECODER =
      new BinaryMessageDecoder<ContactMedium>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ContactMedium> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ContactMedium> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ContactMedium>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ContactMedium to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ContactMedium from a ByteBuffer. */
  public static ContactMedium fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private String mediumType;
   private Characteristic characteristic;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ContactMedium() {}

  /**
   * All-args constructor.
   * @param mediumType The new value for mediumType
   * @param characteristic The new value for characteristic
   */
  public ContactMedium(String mediumType, Characteristic characteristic) {
    this.mediumType = mediumType;
    this.characteristic = characteristic;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return mediumType;
    case 1: return characteristic;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: mediumType = (String)value$; break;
    case 1: characteristic = (Characteristic)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'mediumType' field.
   * @return The value of the 'mediumType' field.
   */
  public String getMediumType() {
    return mediumType;
  }


  /**
   * Gets the value of the 'characteristic' field.
   * @return The value of the 'characteristic' field.
   */
  public Characteristic getCharacteristic() {
    return characteristic;
  }


  /**
   * Creates a new ContactMedium RecordBuilder.
   * @return A new ContactMedium RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new ContactMedium RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ContactMedium RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new ContactMedium RecordBuilder by copying an existing ContactMedium instance.
   * @param other The existing instance to copy.
   * @return A new ContactMedium RecordBuilder
   */
  public static Builder newBuilder(ContactMedium other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for ContactMedium instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ContactMedium>
    implements org.apache.avro.data.RecordBuilder<ContactMedium> {

    private String mediumType;
    private Characteristic characteristic;
    private Characteristic.Builder characteristicBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mediumType)) {
        this.mediumType = data().deepCopy(fields()[0].schema(), other.mediumType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.characteristic)) {
        this.characteristic = data().deepCopy(fields()[1].schema(), other.characteristic);
        fieldSetFlags()[1] = true;
      }
      if (other.hasCharacteristicBuilder()) {
        this.characteristicBuilder = Characteristic.newBuilder(other.getCharacteristicBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ContactMedium instance
     * @param other The existing instance to copy.
     */
    private Builder(ContactMedium other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.mediumType)) {
        this.mediumType = data().deepCopy(fields()[0].schema(), other.mediumType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.characteristic)) {
        this.characteristic = data().deepCopy(fields()[1].schema(), other.characteristic);
        fieldSetFlags()[1] = true;
      }
      this.characteristicBuilder = null;
    }

    /**
      * Gets the value of the 'mediumType' field.
      * @return The value.
      */
    public String getMediumType() {
      return mediumType;
    }

    /**
      * Sets the value of the 'mediumType' field.
      * @param value The value of 'mediumType'.
      * @return This builder.
      */
    public Builder setMediumType(String value) {
      validate(fields()[0], value);
      this.mediumType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mediumType' field has been set.
      * @return True if the 'mediumType' field has been set, false otherwise.
      */
    public boolean hasMediumType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mediumType' field.
      * @return This builder.
      */
    public Builder clearMediumType() {
      mediumType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'characteristic' field.
      * @return The value.
      */
    public Characteristic getCharacteristic() {
      return characteristic;
    }

    /**
      * Sets the value of the 'characteristic' field.
      * @param value The value of 'characteristic'.
      * @return This builder.
      */
    public Builder setCharacteristic(Characteristic value) {
      validate(fields()[1], value);
      this.characteristicBuilder = null;
      this.characteristic = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'characteristic' field has been set.
      * @return True if the 'characteristic' field has been set, false otherwise.
      */
    public boolean hasCharacteristic() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'characteristic' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Characteristic.Builder getCharacteristicBuilder() {
      if (characteristicBuilder == null) {
        if (hasCharacteristic()) {
          setCharacteristicBuilder(Characteristic.newBuilder(characteristic));
        } else {
          setCharacteristicBuilder(Characteristic.newBuilder());
        }
      }
      return characteristicBuilder;
    }

    /**
     * Sets the Builder instance for the 'characteristic' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setCharacteristicBuilder(Characteristic.Builder value) {
      clearCharacteristic();
      characteristicBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'characteristic' field has an active Builder instance
     * @return True if the 'characteristic' field has an active Builder instance
     */
    public boolean hasCharacteristicBuilder() {
      return characteristicBuilder != null;
    }

    /**
      * Clears the value of the 'characteristic' field.
      * @return This builder.
      */
    public Builder clearCharacteristic() {
      characteristic = null;
      characteristicBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ContactMedium build() {
      try {
        ContactMedium record = new ContactMedium();
        record.mediumType = fieldSetFlags()[0] ? this.mediumType : (String) defaultValue(fields()[0]);
        if (characteristicBuilder != null) {
          record.characteristic = this.characteristicBuilder.build();
        } else {
          record.characteristic = fieldSetFlags()[1] ? this.characteristic : (Characteristic) defaultValue(fields()[1]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ContactMedium>
    WRITER$ = (org.apache.avro.io.DatumWriter<ContactMedium>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ContactMedium>
    READER$ = (org.apache.avro.io.DatumReader<ContactMedium>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
