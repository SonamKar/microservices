/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package demo.customermanagement.core.dto.kafka.producedetails;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class IndividualIdentification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7988777130033721287L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IndividualIdentification\",\"namespace\":\"com.Kafka.avro\",\"fields\":[{\"name\":\"identificationId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"identificationType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"issuingDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"placeOfIssue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"issuingAuthority\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"validFor\",\"type\":{\"type\":\"record\",\"name\":\"ValidFor\",\"fields\":[{\"name\":\"startDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"endDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<IndividualIdentification> ENCODER =
      new BinaryMessageEncoder<IndividualIdentification>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<IndividualIdentification> DECODER =
      new BinaryMessageDecoder<IndividualIdentification>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<IndividualIdentification> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<IndividualIdentification> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<IndividualIdentification>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this IndividualIdentification to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a IndividualIdentification from a ByteBuffer. */
  public static IndividualIdentification fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private String identificationId;
   private String identificationType;
   private String issuingDate;
   private String placeOfIssue;
   private String issuingAuthority;
   private ValidFor validFor;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public IndividualIdentification() {}

  /**
   * All-args constructor.
   * @param identificationId The new value for identificationId
   * @param identificationType The new value for identificationType
   * @param issuingDate The new value for issuingDate
   * @param placeOfIssue The new value for placeOfIssue
   * @param issuingAuthority The new value for issuingAuthority
   * @param validFor The new value for validFor
   */
  public IndividualIdentification(String identificationId, String identificationType, String issuingDate, String placeOfIssue, String issuingAuthority, ValidFor validFor) {
    this.identificationId = identificationId;
    this.identificationType = identificationType;
    this.issuingDate = issuingDate;
    this.placeOfIssue = placeOfIssue;
    this.issuingAuthority = issuingAuthority;
    this.validFor = validFor;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return identificationId;
    case 1: return identificationType;
    case 2: return issuingDate;
    case 3: return placeOfIssue;
    case 4: return issuingAuthority;
    case 5: return validFor;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: identificationId = (String)value$; break;
    case 1: identificationType = (String)value$; break;
    case 2: issuingDate = (String)value$; break;
    case 3: placeOfIssue = (String)value$; break;
    case 4: issuingAuthority = (String)value$; break;
    case 5: validFor = (ValidFor)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'identificationId' field.
   * @return The value of the 'identificationId' field.
   */
  public String getIdentificationId() {
    return identificationId;
  }


  /**
   * Gets the value of the 'identificationType' field.
   * @return The value of the 'identificationType' field.
   */
  public String getIdentificationType() {
    return identificationType;
  }


  /**
   * Gets the value of the 'issuingDate' field.
   * @return The value of the 'issuingDate' field.
   */
  public String getIssuingDate() {
    return issuingDate;
  }


  /**
   * Gets the value of the 'placeOfIssue' field.
   * @return The value of the 'placeOfIssue' field.
   */
  public String getPlaceOfIssue() {
    return placeOfIssue;
  }


  /**
   * Gets the value of the 'issuingAuthority' field.
   * @return The value of the 'issuingAuthority' field.
   */
  public String getIssuingAuthority() {
    return issuingAuthority;
  }


  /**
   * Gets the value of the 'validFor' field.
   * @return The value of the 'validFor' field.
   */
  public ValidFor getValidFor() {
    return validFor;
  }


  /**
   * Creates a new IndividualIdentification RecordBuilder.
   * @return A new IndividualIdentification RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new IndividualIdentification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new IndividualIdentification RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new IndividualIdentification RecordBuilder by copying an existing IndividualIdentification instance.
   * @param other The existing instance to copy.
   * @return A new IndividualIdentification RecordBuilder
   */
  public static Builder newBuilder(IndividualIdentification other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for IndividualIdentification instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IndividualIdentification>
    implements org.apache.avro.data.RecordBuilder<IndividualIdentification> {

    private String identificationId;
    private String identificationType;
    private String issuingDate;
    private String placeOfIssue;
    private String issuingAuthority;
    private ValidFor validFor;
    private ValidFor.Builder validForBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.identificationId)) {
        this.identificationId = data().deepCopy(fields()[0].schema(), other.identificationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.identificationType)) {
        this.identificationType = data().deepCopy(fields()[1].schema(), other.identificationType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.issuingDate)) {
        this.issuingDate = data().deepCopy(fields()[2].schema(), other.issuingDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.placeOfIssue)) {
        this.placeOfIssue = data().deepCopy(fields()[3].schema(), other.placeOfIssue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.issuingAuthority)) {
        this.issuingAuthority = data().deepCopy(fields()[4].schema(), other.issuingAuthority);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.validFor)) {
        this.validFor = data().deepCopy(fields()[5].schema(), other.validFor);
        fieldSetFlags()[5] = true;
      }
      if (other.hasValidForBuilder()) {
        this.validForBuilder = ValidFor.newBuilder(other.getValidForBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing IndividualIdentification instance
     * @param other The existing instance to copy.
     */
    private Builder(IndividualIdentification other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.identificationId)) {
        this.identificationId = data().deepCopy(fields()[0].schema(), other.identificationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.identificationType)) {
        this.identificationType = data().deepCopy(fields()[1].schema(), other.identificationType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.issuingDate)) {
        this.issuingDate = data().deepCopy(fields()[2].schema(), other.issuingDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.placeOfIssue)) {
        this.placeOfIssue = data().deepCopy(fields()[3].schema(), other.placeOfIssue);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.issuingAuthority)) {
        this.issuingAuthority = data().deepCopy(fields()[4].schema(), other.issuingAuthority);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.validFor)) {
        this.validFor = data().deepCopy(fields()[5].schema(), other.validFor);
        fieldSetFlags()[5] = true;
      }
      this.validForBuilder = null;
    }

    /**
      * Gets the value of the 'identificationId' field.
      * @return The value.
      */
    public String getIdentificationId() {
      return identificationId;
    }

    /**
      * Sets the value of the 'identificationId' field.
      * @param value The value of 'identificationId'.
      * @return This builder.
      */
    public Builder setIdentificationId(String value) {
      validate(fields()[0], value);
      this.identificationId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'identificationId' field has been set.
      * @return True if the 'identificationId' field has been set, false otherwise.
      */
    public boolean hasIdentificationId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'identificationId' field.
      * @return This builder.
      */
    public Builder clearIdentificationId() {
      identificationId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'identificationType' field.
      * @return The value.
      */
    public String getIdentificationType() {
      return identificationType;
    }

    /**
      * Sets the value of the 'identificationType' field.
      * @param value The value of 'identificationType'.
      * @return This builder.
      */
    public Builder setIdentificationType(String value) {
      validate(fields()[1], value);
      this.identificationType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'identificationType' field has been set.
      * @return True if the 'identificationType' field has been set, false otherwise.
      */
    public boolean hasIdentificationType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'identificationType' field.
      * @return This builder.
      */
    public Builder clearIdentificationType() {
      identificationType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'issuingDate' field.
      * @return The value.
      */
    public String getIssuingDate() {
      return issuingDate;
    }

    /**
      * Sets the value of the 'issuingDate' field.
      * @param value The value of 'issuingDate'.
      * @return This builder.
      */
    public Builder setIssuingDate(String value) {
      validate(fields()[2], value);
      this.issuingDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'issuingDate' field has been set.
      * @return True if the 'issuingDate' field has been set, false otherwise.
      */
    public boolean hasIssuingDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'issuingDate' field.
      * @return This builder.
      */
    public Builder clearIssuingDate() {
      issuingDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'placeOfIssue' field.
      * @return The value.
      */
    public String getPlaceOfIssue() {
      return placeOfIssue;
    }

    /**
      * Sets the value of the 'placeOfIssue' field.
      * @param value The value of 'placeOfIssue'.
      * @return This builder.
      */
    public Builder setPlaceOfIssue(String value) {
      validate(fields()[3], value);
      this.placeOfIssue = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'placeOfIssue' field has been set.
      * @return True if the 'placeOfIssue' field has been set, false otherwise.
      */
    public boolean hasPlaceOfIssue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'placeOfIssue' field.
      * @return This builder.
      */
    public Builder clearPlaceOfIssue() {
      placeOfIssue = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'issuingAuthority' field.
      * @return The value.
      */
    public String getIssuingAuthority() {
      return issuingAuthority;
    }

    /**
      * Sets the value of the 'issuingAuthority' field.
      * @param value The value of 'issuingAuthority'.
      * @return This builder.
      */
    public Builder setIssuingAuthority(String value) {
      validate(fields()[4], value);
      this.issuingAuthority = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'issuingAuthority' field has been set.
      * @return True if the 'issuingAuthority' field has been set, false otherwise.
      */
    public boolean hasIssuingAuthority() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'issuingAuthority' field.
      * @return This builder.
      */
    public Builder clearIssuingAuthority() {
      issuingAuthority = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'validFor' field.
      * @return The value.
      */
    public ValidFor getValidFor() {
      return validFor;
    }

    /**
      * Sets the value of the 'validFor' field.
      * @param value The value of 'validFor'.
      * @return This builder.
      */
    public Builder setValidFor(ValidFor value) {
      validate(fields()[5], value);
      this.validForBuilder = null;
      this.validFor = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'validFor' field has been set.
      * @return True if the 'validFor' field has been set, false otherwise.
      */
    public boolean hasValidFor() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'validFor' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public ValidFor.Builder getValidForBuilder() {
      if (validForBuilder == null) {
        if (hasValidFor()) {
          setValidForBuilder(ValidFor.newBuilder(validFor));
        } else {
          setValidForBuilder(ValidFor.newBuilder());
        }
      }
      return validForBuilder;
    }

    /**
     * Sets the Builder instance for the 'validFor' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setValidForBuilder(ValidFor.Builder value) {
      clearValidFor();
      validForBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'validFor' field has an active Builder instance
     * @return True if the 'validFor' field has an active Builder instance
     */
    public boolean hasValidForBuilder() {
      return validForBuilder != null;
    }

    /**
      * Clears the value of the 'validFor' field.
      * @return This builder.
      */
    public Builder clearValidFor() {
      validFor = null;
      validForBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public IndividualIdentification build() {
      try {
        IndividualIdentification record = new IndividualIdentification();
        record.identificationId = fieldSetFlags()[0] ? this.identificationId : (String) defaultValue(fields()[0]);
        record.identificationType = fieldSetFlags()[1] ? this.identificationType : (String) defaultValue(fields()[1]);
        record.issuingDate = fieldSetFlags()[2] ? this.issuingDate : (String) defaultValue(fields()[2]);
        record.placeOfIssue = fieldSetFlags()[3] ? this.placeOfIssue : (String) defaultValue(fields()[3]);
        record.issuingAuthority = fieldSetFlags()[4] ? this.issuingAuthority : (String) defaultValue(fields()[4]);
        if (validForBuilder != null) {
          record.validFor = this.validForBuilder.build();
        } else {
          record.validFor = fieldSetFlags()[5] ? this.validFor : (ValidFor) defaultValue(fields()[5]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<IndividualIdentification>
    WRITER$ = (org.apache.avro.io.DatumWriter<IndividualIdentification>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<IndividualIdentification>
    READER$ = (org.apache.avro.io.DatumReader<IndividualIdentification>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
