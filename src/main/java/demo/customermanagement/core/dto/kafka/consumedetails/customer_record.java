/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package demo.customermanagement.core.dto.kafka.consumedetails;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class customer_record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8051207310713300989L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"customer_record\",\"namespace\":\"com.Kafka.avro\",\"fields\":[{\"name\":\"at_type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"href\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"status\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"statusReason\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"validFor\",\"type\":{\"type\":\"record\",\"name\":\"validFor\",\"fields\":[{\"name\":\"startDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"endDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"engagedParty\",\"type\":{\"type\":\"record\",\"name\":\"engagedParty_record\",\"fields\":[{\"name\":\"at_referredType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"givenName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"middleName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"familyName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"fullName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"gender\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"birthDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"nationality\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"individualIdentification\",\"type\":{\"type\":\"record\",\"name\":\"individualIdentification_record\",\"fields\":[{\"name\":\"identificationId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"identificationType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"issuingDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"issuingAuthority\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"placeOfIssue\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"validFor\",\"type\":{\"type\":\"record\",\"name\":\"validFor_record\",\"fields\":[{\"name\":\"startDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"endDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}]}},{\"name\":\"contactMedium\",\"type\":{\"type\":\"record\",\"name\":\"contactMedium_record\",\"fields\":[{\"name\":\"mediumType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"characteristic\",\"type\":{\"type\":\"record\",\"name\":\"characteristic_record\",\"fields\":[{\"name\":\"emailAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"phoneNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}]}},{\"name\":\"partyCharacteristic\",\"type\":{\"type\":\"record\",\"name\":\"partyCharacteristic_record\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"valueType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<customer_record> ENCODER =
      new BinaryMessageEncoder<customer_record>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<customer_record> DECODER =
      new BinaryMessageDecoder<customer_record>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<customer_record> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<customer_record> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<customer_record>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this customer_record to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a customer_record from a ByteBuffer. */
  public static customer_record fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private String at_type;
   private String href;
   private String id;
   private String name;
   private String status;
   private String statusReason;
   private demo.customermanagement.core.dto.kafka.consumedetails.validFor validFor;
   private engagedParty_record engagedParty;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public customer_record() {}

  /**
   * All-args constructor.
   * @param at_type The new value for at_type
   * @param href The new value for href
   * @param id The new value for id
   * @param name The new value for name
   * @param status The new value for status
   * @param statusReason The new value for statusReason
   * @param validFor The new value for validFor
   * @param engagedParty The new value for engagedParty
   */
  public customer_record(String at_type, String href, String id, String name, String status, String statusReason, demo.customermanagement.core.dto.kafka.consumedetails.validFor validFor, engagedParty_record engagedParty) {
    this.at_type = at_type;
    this.href = href;
    this.id = id;
    this.name = name;
    this.status = status;
    this.statusReason = statusReason;
    this.validFor = validFor;
    this.engagedParty = engagedParty;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return at_type;
    case 1: return href;
    case 2: return id;
    case 3: return name;
    case 4: return status;
    case 5: return statusReason;
    case 6: return validFor;
    case 7: return engagedParty;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: at_type = (String)value$; break;
    case 1: href = (String)value$; break;
    case 2: id = (String)value$; break;
    case 3: name = (String)value$; break;
    case 4: status = (String)value$; break;
    case 5: statusReason = (String)value$; break;
    case 6: validFor = (demo.customermanagement.core.dto.kafka.consumedetails.validFor)value$; break;
    case 7: engagedParty = (engagedParty_record)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'at_type' field.
   * @return The value of the 'at_type' field.
   */
  public String getAt_type() {
    return at_type;
  }


  /**
   * Gets the value of the 'href' field.
   * @return The value of the 'href' field.
   */
  public String getHref() {
    return href;
  }


  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public String getId() {
    return id;
  }


  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public String getName() {
    return name;
  }


  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public String getStatus() {
    return status;
  }


  /**
   * Gets the value of the 'statusReason' field.
   * @return The value of the 'statusReason' field.
   */
  public String getStatusReason() {
    return statusReason;
  }


  /**
   * Gets the value of the 'validFor' field.
   * @return The value of the 'validFor' field.
   */
  public demo.customermanagement.core.dto.kafka.consumedetails.validFor getValidFor() {
    return validFor;
  }


  /**
   * Gets the value of the 'engagedParty' field.
   * @return The value of the 'engagedParty' field.
   */
  public engagedParty_record getEngagedParty() {
    return engagedParty;
  }


  /**
   * Creates a new customer_record RecordBuilder.
   * @return A new customer_record RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new customer_record RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new customer_record RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new customer_record RecordBuilder by copying an existing customer_record instance.
   * @param other The existing instance to copy.
   * @return A new customer_record RecordBuilder
   */
  public static Builder newBuilder(customer_record other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for customer_record instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<customer_record>
    implements org.apache.avro.data.RecordBuilder<customer_record> {

    private String at_type;
    private String href;
    private String id;
    private String name;
    private String status;
    private String statusReason;
    private demo.customermanagement.core.dto.kafka.consumedetails.validFor validFor;
    private demo.customermanagement.core.dto.kafka.consumedetails.validFor.Builder validForBuilder;
    private engagedParty_record engagedParty;
    private engagedParty_record.Builder engagedPartyBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.at_type)) {
        this.at_type = data().deepCopy(fields()[0].schema(), other.at_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.href)) {
        this.href = data().deepCopy(fields()[1].schema(), other.href);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.status)) {
        this.status = data().deepCopy(fields()[4].schema(), other.status);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.statusReason)) {
        this.statusReason = data().deepCopy(fields()[5].schema(), other.statusReason);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.validFor)) {
        this.validFor = data().deepCopy(fields()[6].schema(), other.validFor);
        fieldSetFlags()[6] = true;
      }
      if (other.hasValidForBuilder()) {
        this.validForBuilder = demo.customermanagement.core.dto.kafka.consumedetails.validFor
            .newBuilder(other.getValidForBuilder());
      }
      if (isValidValue(fields()[7], other.engagedParty)) {
        this.engagedParty = data().deepCopy(fields()[7].schema(), other.engagedParty);
        fieldSetFlags()[7] = true;
      }
      if (other.hasEngagedPartyBuilder()) {
        this.engagedPartyBuilder = engagedParty_record.newBuilder(other.getEngagedPartyBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing customer_record instance
     * @param other The existing instance to copy.
     */
    private Builder(customer_record other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.at_type)) {
        this.at_type = data().deepCopy(fields()[0].schema(), other.at_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.href)) {
        this.href = data().deepCopy(fields()[1].schema(), other.href);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.name)) {
        this.name = data().deepCopy(fields()[3].schema(), other.name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.status)) {
        this.status = data().deepCopy(fields()[4].schema(), other.status);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.statusReason)) {
        this.statusReason = data().deepCopy(fields()[5].schema(), other.statusReason);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.validFor)) {
        this.validFor = data().deepCopy(fields()[6].schema(), other.validFor);
        fieldSetFlags()[6] = true;
      }
      this.validForBuilder = null;
      if (isValidValue(fields()[7], other.engagedParty)) {
        this.engagedParty = data().deepCopy(fields()[7].schema(), other.engagedParty);
        fieldSetFlags()[7] = true;
      }
      this.engagedPartyBuilder = null;
    }

    /**
      * Gets the value of the 'at_type' field.
      * @return The value.
      */
    public String getAtType() {
      return at_type;
    }

    /**
      * Sets the value of the 'at_type' field.
      * @param value The value of 'at_type'.
      * @return This builder.
      */
    public Builder setAtType(String value) {
      validate(fields()[0], value);
      this.at_type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'at_type' field has been set.
      * @return True if the 'at_type' field has been set, false otherwise.
      */
    public boolean hasAtType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'at_type' field.
      * @return This builder.
      */
    public Builder clearAtType() {
      at_type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'href' field.
      * @return The value.
      */
    public String getHref() {
      return href;
    }

    /**
      * Sets the value of the 'href' field.
      * @param value The value of 'href'.
      * @return This builder.
      */
    public Builder setHref(String value) {
      validate(fields()[1], value);
      this.href = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'href' field has been set.
      * @return True if the 'href' field has been set, false otherwise.
      */
    public boolean hasHref() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'href' field.
      * @return This builder.
      */
    public Builder clearHref() {
      href = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(String value) {
      validate(fields()[2], value);
      this.id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public Builder setName(String value) {
      validate(fields()[3], value);
      this.name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public Builder clearName() {
      name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public String getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public Builder setStatus(String value) {
      validate(fields()[4], value);
      this.status = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public Builder clearStatus() {
      status = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'statusReason' field.
      * @return The value.
      */
    public String getStatusReason() {
      return statusReason;
    }

    /**
      * Sets the value of the 'statusReason' field.
      * @param value The value of 'statusReason'.
      * @return This builder.
      */
    public Builder setStatusReason(String value) {
      validate(fields()[5], value);
      this.statusReason = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'statusReason' field has been set.
      * @return True if the 'statusReason' field has been set, false otherwise.
      */
    public boolean hasStatusReason() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'statusReason' field.
      * @return This builder.
      */
    public Builder clearStatusReason() {
      statusReason = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'validFor' field.
      * @return The value.
      */
    public demo.customermanagement.core.dto.kafka.consumedetails.validFor getValidFor() {
      return validFor;
    }

    /**
      * Sets the value of the 'validFor' field.
      * @param value The value of 'validFor'.
      * @return This builder.
      */
    public Builder setValidFor(
        demo.customermanagement.core.dto.kafka.consumedetails.validFor value) {
      validate(fields()[6], value);
      this.validForBuilder = null;
      this.validFor = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'validFor' field has been set.
      * @return True if the 'validFor' field has been set, false otherwise.
      */
    public boolean hasValidFor() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'validFor' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public demo.customermanagement.core.dto.kafka.consumedetails.validFor.Builder getValidForBuilder() {
      if (validForBuilder == null) {
        if (hasValidFor()) {
          setValidForBuilder(demo.customermanagement.core.dto.kafka.consumedetails.validFor.newBuilder(validFor));
        } else {
          setValidForBuilder(demo.customermanagement.core.dto.kafka.consumedetails.validFor.newBuilder());
        }
      }
      return validForBuilder;
    }

    /**
     * Sets the Builder instance for the 'validFor' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setValidForBuilder(
        demo.customermanagement.core.dto.kafka.consumedetails.validFor.Builder value) {
      clearValidFor();
      validForBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'validFor' field has an active Builder instance
     * @return True if the 'validFor' field has an active Builder instance
     */
    public boolean hasValidForBuilder() {
      return validForBuilder != null;
    }

    /**
      * Clears the value of the 'validFor' field.
      * @return This builder.
      */
    public Builder clearValidFor() {
      validFor = null;
      validForBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'engagedParty' field.
      * @return The value.
      */
    public engagedParty_record getEngagedParty() {
      return engagedParty;
    }

    /**
      * Sets the value of the 'engagedParty' field.
      * @param value The value of 'engagedParty'.
      * @return This builder.
      */
    public Builder setEngagedParty(engagedParty_record value) {
      validate(fields()[7], value);
      this.engagedPartyBuilder = null;
      this.engagedParty = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'engagedParty' field has been set.
      * @return True if the 'engagedParty' field has been set, false otherwise.
      */
    public boolean hasEngagedParty() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'engagedParty' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public engagedParty_record.Builder getEngagedPartyBuilder() {
      if (engagedPartyBuilder == null) {
        if (hasEngagedParty()) {
          setEngagedPartyBuilder(engagedParty_record.newBuilder(engagedParty));
        } else {
          setEngagedPartyBuilder(engagedParty_record.newBuilder());
        }
      }
      return engagedPartyBuilder;
    }

    /**
     * Sets the Builder instance for the 'engagedParty' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setEngagedPartyBuilder(engagedParty_record.Builder value) {
      clearEngagedParty();
      engagedPartyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'engagedParty' field has an active Builder instance
     * @return True if the 'engagedParty' field has an active Builder instance
     */
    public boolean hasEngagedPartyBuilder() {
      return engagedPartyBuilder != null;
    }

    /**
      * Clears the value of the 'engagedParty' field.
      * @return This builder.
      */
    public Builder clearEngagedParty() {
      engagedParty = null;
      engagedPartyBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public customer_record build() {
      try {
        customer_record record = new customer_record();
        record.at_type = fieldSetFlags()[0] ? this.at_type : (String) defaultValue(fields()[0]);
        record.href = fieldSetFlags()[1] ? this.href : (String) defaultValue(fields()[1]);
        record.id = fieldSetFlags()[2] ? this.id : (String) defaultValue(fields()[2]);
        record.name = fieldSetFlags()[3] ? this.name : (String) defaultValue(fields()[3]);
        record.status = fieldSetFlags()[4] ? this.status : (String) defaultValue(fields()[4]);
        record.statusReason = fieldSetFlags()[5] ? this.statusReason : (String) defaultValue(fields()[5]);
        if (validForBuilder != null) {
          record.validFor = this.validForBuilder.build();
        } else {
          record.validFor = fieldSetFlags()[6] ? this.validFor : (demo.customermanagement.core.dto.kafka.consumedetails.validFor) defaultValue(fields()[6]);
        }
        if (engagedPartyBuilder != null) {
          record.engagedParty = this.engagedPartyBuilder.build();
        } else {
          record.engagedParty = fieldSetFlags()[7] ? this.engagedParty : (engagedParty_record) defaultValue(fields()[7]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<customer_record>
    WRITER$ = (org.apache.avro.io.DatumWriter<customer_record>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<customer_record>
    READER$ = (org.apache.avro.io.DatumReader<customer_record>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
