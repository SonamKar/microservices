/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package demo.customermanagement.core.dto.kafka.producedetails;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CustomerResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9107430903893917678L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CustomerResponse\",\"namespace\":\"com.Kafka.avro\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"engagedParty\",\"type\":{\"type\":\"record\",\"name\":\"EngagedParty\",\"fields\":[{\"name\":\"at_referredType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"givenName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"middleName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"familyName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"fullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"gender\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"nationality\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"birthDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"contactMedium\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ContactMedium\",\"fields\":[{\"name\":\"mediumType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"characteristic\",\"type\":{\"type\":\"record\",\"name\":\"Characteristic\",\"fields\":[{\"name\":\"emailAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"phoneNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}}},{\"name\":\"individualIdentification\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IndividualIdentification\",\"fields\":[{\"name\":\"identificationId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"identificationType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"issuingDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"placeOfIssue\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"issuingAuthority\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"validFor\",\"type\":{\"type\":\"record\",\"name\":\"ValidFor\",\"fields\":[{\"name\":\"startDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"endDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}]}}},{\"name\":\"partyCharacteristic\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PartyCharacteristic\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"valueType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}},{\"name\":\"account\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Account\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"at_referredType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CustomerResponse> ENCODER =
      new BinaryMessageEncoder<CustomerResponse>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CustomerResponse> DECODER =
      new BinaryMessageDecoder<CustomerResponse>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CustomerResponse> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CustomerResponse> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CustomerResponse>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CustomerResponse to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CustomerResponse from a ByteBuffer. */
  public static CustomerResponse fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private String id;
   private String name;
   private EngagedParty engagedParty;
   private java.util.List<Account> account;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CustomerResponse() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param engagedParty The new value for engagedParty
   * @param account The new value for account
   */
  public CustomerResponse(String id, String name, EngagedParty engagedParty, java.util.List<Account> account) {
    this.id = id;
    this.name = name;
    this.engagedParty = engagedParty;
    this.account = account;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return engagedParty;
    case 3: return account;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (String)value$; break;
    case 1: name = (String)value$; break;
    case 2: engagedParty = (EngagedParty)value$; break;
    case 3: account = (java.util.List<Account>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public String getId() {
    return id;
  }


  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public String getName() {
    return name;
  }


  /**
   * Gets the value of the 'engagedParty' field.
   * @return The value of the 'engagedParty' field.
   */
  public EngagedParty getEngagedParty() {
    return engagedParty;
  }


  /**
   * Gets the value of the 'account' field.
   * @return The value of the 'account' field.
   */
  public java.util.List<Account> getAccount() {
    return account;
  }


  /**
   * Creates a new CustomerResponse RecordBuilder.
   * @return A new CustomerResponse RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new CustomerResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CustomerResponse RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new CustomerResponse RecordBuilder by copying an existing CustomerResponse instance.
   * @param other The existing instance to copy.
   * @return A new CustomerResponse RecordBuilder
   */
  public static Builder newBuilder(CustomerResponse other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for CustomerResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CustomerResponse>
    implements org.apache.avro.data.RecordBuilder<CustomerResponse> {

    private String id;
    private String name;
    private EngagedParty engagedParty;
    private EngagedParty.Builder engagedPartyBuilder;
    private java.util.List<Account> account;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.engagedParty)) {
        this.engagedParty = data().deepCopy(fields()[2].schema(), other.engagedParty);
        fieldSetFlags()[2] = true;
      }
      if (other.hasEngagedPartyBuilder()) {
        this.engagedPartyBuilder = EngagedParty.newBuilder(other.getEngagedPartyBuilder());
      }
      if (isValidValue(fields()[3], other.account)) {
        this.account = data().deepCopy(fields()[3].schema(), other.account);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CustomerResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(CustomerResponse other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.engagedParty)) {
        this.engagedParty = data().deepCopy(fields()[2].schema(), other.engagedParty);
        fieldSetFlags()[2] = true;
      }
      this.engagedPartyBuilder = null;
      if (isValidValue(fields()[3], other.account)) {
        this.account = data().deepCopy(fields()[3].schema(), other.account);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public Builder setName(String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'engagedParty' field.
      * @return The value.
      */
    public EngagedParty getEngagedParty() {
      return engagedParty;
    }

    /**
      * Sets the value of the 'engagedParty' field.
      * @param value The value of 'engagedParty'.
      * @return This builder.
      */
    public Builder setEngagedParty(EngagedParty value) {
      validate(fields()[2], value);
      this.engagedPartyBuilder = null;
      this.engagedParty = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'engagedParty' field has been set.
      * @return True if the 'engagedParty' field has been set, false otherwise.
      */
    public boolean hasEngagedParty() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'engagedParty' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public EngagedParty.Builder getEngagedPartyBuilder() {
      if (engagedPartyBuilder == null) {
        if (hasEngagedParty()) {
          setEngagedPartyBuilder(EngagedParty.newBuilder(engagedParty));
        } else {
          setEngagedPartyBuilder(EngagedParty.newBuilder());
        }
      }
      return engagedPartyBuilder;
    }

    /**
     * Sets the Builder instance for the 'engagedParty' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setEngagedPartyBuilder(EngagedParty.Builder value) {
      clearEngagedParty();
      engagedPartyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'engagedParty' field has an active Builder instance
     * @return True if the 'engagedParty' field has an active Builder instance
     */
    public boolean hasEngagedPartyBuilder() {
      return engagedPartyBuilder != null;
    }

    /**
      * Clears the value of the 'engagedParty' field.
      * @return This builder.
      */
    public Builder clearEngagedParty() {
      engagedParty = null;
      engagedPartyBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'account' field.
      * @return The value.
      */
    public java.util.List<Account> getAccount() {
      return account;
    }

    /**
      * Sets the value of the 'account' field.
      * @param value The value of 'account'.
      * @return This builder.
      */
    public Builder setAccount(java.util.List<Account> value) {
      validate(fields()[3], value);
      this.account = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'account' field has been set.
      * @return True if the 'account' field has been set, false otherwise.
      */
    public boolean hasAccount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'account' field.
      * @return This builder.
      */
    public Builder clearAccount() {
      account = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CustomerResponse build() {
      try {
        CustomerResponse record = new CustomerResponse();
        record.id = fieldSetFlags()[0] ? this.id : (String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (String) defaultValue(fields()[1]);
        if (engagedPartyBuilder != null) {
          record.engagedParty = this.engagedPartyBuilder.build();
        } else {
          record.engagedParty = fieldSetFlags()[2] ? this.engagedParty : (EngagedParty) defaultValue(fields()[2]);
        }
        record.account = fieldSetFlags()[3] ? this.account : (java.util.List<Account>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CustomerResponse>
    WRITER$ = (org.apache.avro.io.DatumWriter<CustomerResponse>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CustomerResponse>
    READER$ = (org.apache.avro.io.DatumReader<CustomerResponse>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
