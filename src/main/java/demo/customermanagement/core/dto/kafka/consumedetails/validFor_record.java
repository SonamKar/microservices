/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package demo.customermanagement.core.dto.kafka.consumedetails;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class validFor_record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5549170357020495880L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"validFor_record\",\"namespace\":\"com.Kafka.avro\",\"fields\":[{\"name\":\"startDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"endDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<validFor_record> ENCODER =
      new BinaryMessageEncoder<validFor_record>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<validFor_record> DECODER =
      new BinaryMessageDecoder<validFor_record>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<validFor_record> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<validFor_record> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<validFor_record>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this validFor_record to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a validFor_record from a ByteBuffer. */
  public static validFor_record fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private String startDateTime;
   private String endDateTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public validFor_record() {}

  /**
   * All-args constructor.
   * @param startDateTime The new value for startDateTime
   * @param endDateTime The new value for endDateTime
   */
  public validFor_record(String startDateTime, String endDateTime) {
    this.startDateTime = startDateTime;
    this.endDateTime = endDateTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return startDateTime;
    case 1: return endDateTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: startDateTime = (String)value$; break;
    case 1: endDateTime = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'startDateTime' field.
   * @return The value of the 'startDateTime' field.
   */
  public String getStartDateTime() {
    return startDateTime;
  }


  /**
   * Gets the value of the 'endDateTime' field.
   * @return The value of the 'endDateTime' field.
   */
  public String getEndDateTime() {
    return endDateTime;
  }


  /**
   * Creates a new validFor_record RecordBuilder.
   * @return A new validFor_record RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new validFor_record RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new validFor_record RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new validFor_record RecordBuilder by copying an existing validFor_record instance.
   * @param other The existing instance to copy.
   * @return A new validFor_record RecordBuilder
   */
  public static Builder newBuilder(validFor_record other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for validFor_record instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<validFor_record>
    implements org.apache.avro.data.RecordBuilder<validFor_record> {

    private String startDateTime;
    private String endDateTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.startDateTime)) {
        this.startDateTime = data().deepCopy(fields()[0].schema(), other.startDateTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.endDateTime)) {
        this.endDateTime = data().deepCopy(fields()[1].schema(), other.endDateTime);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing validFor_record instance
     * @param other The existing instance to copy.
     */
    private Builder(validFor_record other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.startDateTime)) {
        this.startDateTime = data().deepCopy(fields()[0].schema(), other.startDateTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.endDateTime)) {
        this.endDateTime = data().deepCopy(fields()[1].schema(), other.endDateTime);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'startDateTime' field.
      * @return The value.
      */
    public String getStartDateTime() {
      return startDateTime;
    }

    /**
      * Sets the value of the 'startDateTime' field.
      * @param value The value of 'startDateTime'.
      * @return This builder.
      */
    public Builder setStartDateTime(String value) {
      validate(fields()[0], value);
      this.startDateTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'startDateTime' field has been set.
      * @return True if the 'startDateTime' field has been set, false otherwise.
      */
    public boolean hasStartDateTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'startDateTime' field.
      * @return This builder.
      */
    public Builder clearStartDateTime() {
      startDateTime = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'endDateTime' field.
      * @return The value.
      */
    public String getEndDateTime() {
      return endDateTime;
    }

    /**
      * Sets the value of the 'endDateTime' field.
      * @param value The value of 'endDateTime'.
      * @return This builder.
      */
    public Builder setEndDateTime(String value) {
      validate(fields()[1], value);
      this.endDateTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'endDateTime' field has been set.
      * @return True if the 'endDateTime' field has been set, false otherwise.
      */
    public boolean hasEndDateTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'endDateTime' field.
      * @return This builder.
      */
    public Builder clearEndDateTime() {
      endDateTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public validFor_record build() {
      try {
        validFor_record record = new validFor_record();
        record.startDateTime = fieldSetFlags()[0] ? this.startDateTime : (String) defaultValue(fields()[0]);
        record.endDateTime = fieldSetFlags()[1] ? this.endDateTime : (String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<validFor_record>
    WRITER$ = (org.apache.avro.io.DatumWriter<validFor_record>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<validFor_record>
    READER$ = (org.apache.avro.io.DatumReader<validFor_record>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
