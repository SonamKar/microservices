/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package demo.customermanagement.core.dto.kafka.consumedetails;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class customerCreateEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5980195733178656137L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"customerCreateEvent\",\"namespace\":\"com.Kafka.avro\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"eventTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"eventType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"event\",\"type\":{\"type\":\"record\",\"name\":\"event_record\",\"fields\":[{\"name\":\"customer\",\"type\":{\"type\":\"record\",\"name\":\"customer_record\",\"fields\":[{\"name\":\"at_type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"href\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"status\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"statusReason\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"validFor\",\"type\":{\"type\":\"record\",\"name\":\"validFor\",\"fields\":[{\"name\":\"startDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"endDateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"engagedParty\",\"type\":{\"type\":\"record\",\"name\":\"engagedParty_record\",\"fields\":[{\"name\":\"at_referredType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"givenName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"middleName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"familyName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"fullName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"gender\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"birthDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"nationality\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"individualIdentification\",\"type\":{\"type\":\"record\",\"name\":\"individualIdentification_record\",\"fields\":[{\"name\":\"identificationId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"identificationType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"issuingDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"issuingAuthority\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"placeOfIssue\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"validFor\",\"type\":{\"type\":\"record\",\"name\":\"validFor_record\",\"fields\":[{\"name\":\"startDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"endDateTime\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}]}},{\"name\":\"contactMedium\",\"type\":{\"type\":\"record\",\"name\":\"contactMedium_record\",\"fields\":[{\"name\":\"mediumType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"characteristic\",\"type\":{\"type\":\"record\",\"name\":\"characteristic_record\",\"fields\":[{\"name\":\"emailAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"phoneNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}]}},{\"name\":\"partyCharacteristic\",\"type\":{\"type\":\"record\",\"name\":\"partyCharacteristic_record\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"valueType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}}]}}]}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<customerCreateEvent> ENCODER =
      new BinaryMessageEncoder<customerCreateEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<customerCreateEvent> DECODER =
      new BinaryMessageDecoder<customerCreateEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<customerCreateEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<customerCreateEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<customerCreateEvent>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this customerCreateEvent to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a customerCreateEvent from a ByteBuffer. */
  public static customerCreateEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private String eventId;
   private String eventTime;
   private String eventType;
   private event_record event;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public customerCreateEvent() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param eventTime The new value for eventTime
   * @param eventType The new value for eventType
   * @param event The new value for event
   */
  public customerCreateEvent(String eventId, String eventTime, String eventType, event_record event) {
    this.eventId = eventId;
    this.eventTime = eventTime;
    this.eventType = eventType;
    this.event = event;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return eventTime;
    case 2: return eventType;
    case 3: return event;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: eventId = (String)value$; break;
    case 1: eventTime = (String)value$; break;
    case 2: eventType = (String)value$; break;
    case 3: event = (event_record)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public String getEventId() {
    return eventId;
  }


  /**
   * Gets the value of the 'eventTime' field.
   * @return The value of the 'eventTime' field.
   */
  public String getEventTime() {
    return eventTime;
  }


  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public String getEventType() {
    return eventType;
  }


  /**
   * Gets the value of the 'event' field.
   * @return The value of the 'event' field.
   */
  public event_record getEvent() {
    return event;
  }


  /**
   * Creates a new customerCreateEvent RecordBuilder.
   * @return A new customerCreateEvent RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new customerCreateEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new customerCreateEvent RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new customerCreateEvent RecordBuilder by copying an existing customerCreateEvent instance.
   * @param other The existing instance to copy.
   * @return A new customerCreateEvent RecordBuilder
   */
  public static Builder newBuilder(customerCreateEvent other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for customerCreateEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<customerCreateEvent>
    implements org.apache.avro.data.RecordBuilder<customerCreateEvent> {

    private String eventId;
    private String eventTime;
    private String eventType;
    private event_record event;
    private event_record.Builder eventBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[1].schema(), other.eventTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventType)) {
        this.eventType = data().deepCopy(fields()[2].schema(), other.eventType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.event)) {
        this.event = data().deepCopy(fields()[3].schema(), other.event);
        fieldSetFlags()[3] = true;
      }
      if (other.hasEventBuilder()) {
        this.eventBuilder = event_record.newBuilder(other.getEventBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing customerCreateEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(customerCreateEvent other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[1].schema(), other.eventTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventType)) {
        this.eventType = data().deepCopy(fields()[2].schema(), other.eventType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.event)) {
        this.event = data().deepCopy(fields()[3].schema(), other.event);
        fieldSetFlags()[3] = true;
      }
      this.eventBuilder = null;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public String getEventId() {
      return eventId;
    }

    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public Builder setEventId(String value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTime' field.
      * @return The value.
      */
    public String getEventTime() {
      return eventTime;
    }

    /**
      * Sets the value of the 'eventTime' field.
      * @param value The value of 'eventTime'.
      * @return This builder.
      */
    public Builder setEventTime(String value) {
      validate(fields()[1], value);
      this.eventTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTime' field has been set.
      * @return True if the 'eventTime' field has been set, false otherwise.
      */
    public boolean hasEventTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventTime' field.
      * @return This builder.
      */
    public Builder clearEventTime() {
      eventTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public String getEventType() {
      return eventType;
    }

    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public Builder setEventType(String value) {
      validate(fields()[2], value);
      this.eventType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'event' field.
      * @return The value.
      */
    public event_record getEvent() {
      return event;
    }

    /**
      * Sets the value of the 'event' field.
      * @param value The value of 'event'.
      * @return This builder.
      */
    public Builder setEvent(event_record value) {
      validate(fields()[3], value);
      this.eventBuilder = null;
      this.event = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'event' field has been set.
      * @return True if the 'event' field has been set, false otherwise.
      */
    public boolean hasEvent() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'event' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public event_record.Builder getEventBuilder() {
      if (eventBuilder == null) {
        if (hasEvent()) {
          setEventBuilder(event_record.newBuilder(event));
        } else {
          setEventBuilder(event_record.newBuilder());
        }
      }
      return eventBuilder;
    }

    /**
     * Sets the Builder instance for the 'event' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setEventBuilder(event_record.Builder value) {
      clearEvent();
      eventBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'event' field has an active Builder instance
     * @return True if the 'event' field has an active Builder instance
     */
    public boolean hasEventBuilder() {
      return eventBuilder != null;
    }

    /**
      * Clears the value of the 'event' field.
      * @return This builder.
      */
    public Builder clearEvent() {
      event = null;
      eventBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public customerCreateEvent build() {
      try {
        customerCreateEvent record = new customerCreateEvent();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (String) defaultValue(fields()[0]);
        record.eventTime = fieldSetFlags()[1] ? this.eventTime : (String) defaultValue(fields()[1]);
        record.eventType = fieldSetFlags()[2] ? this.eventType : (String) defaultValue(fields()[2]);
        if (eventBuilder != null) {
          record.event = this.eventBuilder.build();
        } else {
          record.event = fieldSetFlags()[3] ? this.event : (event_record) defaultValue(fields()[3]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<customerCreateEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<customerCreateEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<customerCreateEvent>
    READER$ = (org.apache.avro.io.DatumReader<customerCreateEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
