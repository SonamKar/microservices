/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package demo.customermanagement.core.dto.kafka.consumedetails;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class characteristic_record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6599893945609816817L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"characteristic_record\",\"namespace\":\"com.Kafka.avro\",\"fields\":[{\"name\":\"emailAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"phoneNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<characteristic_record> ENCODER =
      new BinaryMessageEncoder<characteristic_record>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<characteristic_record> DECODER =
      new BinaryMessageDecoder<characteristic_record>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<characteristic_record> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<characteristic_record> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<characteristic_record>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this characteristic_record to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a characteristic_record from a ByteBuffer. */
  public static characteristic_record fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private String emailAddress;
   private String phoneNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public characteristic_record() {}

  /**
   * All-args constructor.
   * @param emailAddress The new value for emailAddress
   * @param phoneNumber The new value for phoneNumber
   */
  public characteristic_record(String emailAddress, String phoneNumber) {
    this.emailAddress = emailAddress;
    this.phoneNumber = phoneNumber;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return emailAddress;
    case 1: return phoneNumber;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: emailAddress = (String)value$; break;
    case 1: phoneNumber = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'emailAddress' field.
   * @return The value of the 'emailAddress' field.
   */
  public String getEmailAddress() {
    return emailAddress;
  }


  /**
   * Gets the value of the 'phoneNumber' field.
   * @return The value of the 'phoneNumber' field.
   */
  public String getPhoneNumber() {
    return phoneNumber;
  }


  /**
   * Creates a new characteristic_record RecordBuilder.
   * @return A new characteristic_record RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new characteristic_record RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new characteristic_record RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new characteristic_record RecordBuilder by copying an existing characteristic_record instance.
   * @param other The existing instance to copy.
   * @return A new characteristic_record RecordBuilder
   */
  public static Builder newBuilder(characteristic_record other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for characteristic_record instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<characteristic_record>
    implements org.apache.avro.data.RecordBuilder<characteristic_record> {

    private String emailAddress;
    private String phoneNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[0].schema(), other.emailAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[1].schema(), other.phoneNumber);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing characteristic_record instance
     * @param other The existing instance to copy.
     */
    private Builder(characteristic_record other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[0].schema(), other.emailAddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.phoneNumber)) {
        this.phoneNumber = data().deepCopy(fields()[1].schema(), other.phoneNumber);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'emailAddress' field.
      * @return The value.
      */
    public String getEmailAddress() {
      return emailAddress;
    }

    /**
      * Sets the value of the 'emailAddress' field.
      * @param value The value of 'emailAddress'.
      * @return This builder.
      */
    public Builder setEmailAddress(String value) {
      validate(fields()[0], value);
      this.emailAddress = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'emailAddress' field has been set.
      * @return True if the 'emailAddress' field has been set, false otherwise.
      */
    public boolean hasEmailAddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'emailAddress' field.
      * @return This builder.
      */
    public Builder clearEmailAddress() {
      emailAddress = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'phoneNumber' field.
      * @return The value.
      */
    public String getPhoneNumber() {
      return phoneNumber;
    }

    /**
      * Sets the value of the 'phoneNumber' field.
      * @param value The value of 'phoneNumber'.
      * @return This builder.
      */
    public Builder setPhoneNumber(String value) {
      validate(fields()[1], value);
      this.phoneNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'phoneNumber' field has been set.
      * @return True if the 'phoneNumber' field has been set, false otherwise.
      */
    public boolean hasPhoneNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'phoneNumber' field.
      * @return This builder.
      */
    public Builder clearPhoneNumber() {
      phoneNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public characteristic_record build() {
      try {
        characteristic_record record = new characteristic_record();
        record.emailAddress = fieldSetFlags()[0] ? this.emailAddress : (String) defaultValue(fields()[0]);
        record.phoneNumber = fieldSetFlags()[1] ? this.phoneNumber : (String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<characteristic_record>
    WRITER$ = (org.apache.avro.io.DatumWriter<characteristic_record>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<characteristic_record>
    READER$ = (org.apache.avro.io.DatumReader<characteristic_record>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
